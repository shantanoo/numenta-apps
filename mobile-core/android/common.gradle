/*
 * Numenta Platform for Intelligent Computing (NuPIC)
 * Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
 * Numenta, Inc. a separate commercial license for this software code, the
 * following terms and conditions apply:
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero Public License for more details.
 *
 * You should have received a copy of the GNU Affero Public License
 * along with this program.  If not, see http://www.gnu.org/licenses.
 *
 * http://numenta.org/licenses/
 *
 */

allprojects {
    /*
     * Add global functions in here.
     *
     * Usage:
     *      Add the following line to your root 'build.gradle'
     *      <code>
     *          apply from: '../../mobile-core/android/common.gradle'
     *      </code>
     */
    ext {
        /**
         * Get commit count for the root project and it's subproject from git
         *
         * Executes the following command:
         * <code>
         *     git rev-list HEAD --count . ../../mobile-core
         * <code>
         */
        gitCommitCount = {
            def stdout = new ByteArrayOutputStream()
            def args = ['git', 'rev-list', 'HEAD', '--count']
            rootProject.subprojects.each {
                args.add(it.projectDir.absolutePath)
            }
            exec {
                commandLine  args
                standardOutput = stdout
            }
            return Integer.parseInt(stdout.toString().trim())
        }()

        /**
         * Get the latest commit SHA from git
         *
         * Executes the following command:
         * <code>
         *     git rev-parse --short HEAD
         * </code>
         */
        gitCommitSHA = {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        }()

        /**
         * Get Keystore password from the 'BUILD_PASSWORD' environment variable or
         * prompt the user for the password if the environment variable is not set
         */
        askForKeystorePassword = {
            String password = System.getenv('BUILD_PASSWORD')
            if (password == null) {
                password = System.getProperty('BUILD_PASSWORD')
            }
            if (password == null && System.console() != null) {
                password = new String(System.console().readPassword('\nEnter keystore password: '))
            }
            return password
        }
        /**
         * Default Keystore file location.
         * Make sure this file exists otherwise the build will fail
         */
        defaultKeystoreLocation = '/etc/numenta/products/keys/grok.keystore'

        /**
         * The key alias used to sign the release APK,.
         */
        defaultKeyAlias = 'grok'

        /**
         * Initial version code to use in addition to 'gitCommitCount'
         */
        initialVersionCode = System.getProperty('INITIAL_VERSION_CODE', '0').toInteger()
    }
}
