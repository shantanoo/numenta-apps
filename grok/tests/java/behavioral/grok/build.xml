<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Numenta Platform for Intelligent Computing (NuPIC)
  ~ Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
  ~ Numenta, Inc. a separate commercial license for this software code, the
  ~ following terms and conditions apply:
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero Public License version 3 as
  ~ published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Affero Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero Public License
  ~ along with this program.  If not, see http://www.gnu.org/licenses.
  ~
  ~ http://numenta.org/licenses/
  ~
  -->

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="grok-web-automation" default="run" basedir=".">
    <property name="src" location="src" />
    <property name="build" location="build" />
    <property name = "lib.dir" value="${basedir}/lib" />
    <property name = "testng.output.dir" value="${basedir}/results" />

    <path id="classpath">
       <fileset dir="${lib.dir}" includes="**/*.jar" />
       <pathelement location="build" />
    </path>

    <target name="resolve" description="Retrieve dependencies with ivy">
        <ivy:retrieve conf="binaries" pattern="lib/[artifact]-[revision].[ext]" />
    </target>

   <!-- create build folder, testng_output folder and remove old log file -->
    <target name="init" depends="resolve">
        <delete dir="build" />
        <delete dir="testng_output" />
        <delete file="Test_Auto.log" />
        <mkdir dir="${build}" />
    </target>
    <!-- build all java file to class binary -->
    <target name="compile" depends="init">
        <javac srcdir="${src}" destdir="${build}" classpathref="classpath" includeantruntime="false" />
    </target>

    <!-- execute testng after compile, then generate report -->
    <target name="run" depends="compile">
        <mkdir dir="${testng.output.dir}" />
        <taskdef name="testng" classname="org.testng.TestNGAntTask">
                    <classpath>
                        <pathelement location="./lib/testng-6.8.8.jar" />
                    </classpath>
        </taskdef>

        <!-- config testng -->
        <testng outputdir="${testng.output.dir}" classpathref="classpath">
            <sysproperty key="serverURL" value="${serverURL}" />
            <sysproperty key="accessKeyID" value="${accessKeyID}" />
            <sysproperty key="secretKey" value="${secretKey}" />
            <sysproperty key="os" value="${os}" />
            <sysproperty key="browser" value="${browser}" />
            <sysproperty key="saucename" value="${saucename}" />
            <sysproperty key="saucekey" value="${saucekey}" />
            <sysproperty key="usertype" value="${usertype}" />
            <!-- execute testcase -->
            <xmlfileset dir="./SupportBuildXML" includes="testinggrok.xml" />
        </testng>
    </target>
</project>
