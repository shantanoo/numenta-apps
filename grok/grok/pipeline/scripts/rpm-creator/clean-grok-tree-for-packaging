#!/bin/bash
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
# Used during packaging grok RPMs.
#
# Do not run this script if you are not in a scratch checkout!
#
# THIS SCRIPT WILL DESTROY ANY WORK IN PROGRESS YOU HAVE IN THIS CHECKOUT!

set -o errexit
set -o nounset
set -o pipefail

show_usage() {
  cat <<USAGE_WARNING
${0} is used by rpm-creator.py to prepare a git checkout of this repo for
packaging.

You almost certainly do not want to run this in your checkout; it deletes
many .py files from the current directory (and all subdirectories) This
is likely to make you very sad if it happens someplace you are doing work.

If you really, *really* want to run it, do:

${0} --destroy-all-my-work

and don't say you weren't warned.

USAGE_WARNING
}

if [ $# == 0 ]; then
  show_usage
  exit 0
fi

if [ "$1" != "--destroy-all-my-work" ]; then
  show_usage
  exit 0
fi

echo "*******************"
pushd "${GROK_HOME}"
  echo "Capturing git SHA..."
  groksha=$(git rev-parse --verify HEAD)
  echo "${groksha}"
  echo "${groksha}" > static/grok.sha

  echo "Recording Grok Release Version..."
  bin/update_release_version.py $(python -c 'from grok.__version__ import __version__; print __version__')-$(git rev-list HEAD | wc -l)

  echo "Grok version:"
  python -c "from grok.__version__ import __version__; print __version__"

  echo "Removing stale .pyc files"
  find . -name '*.pyc' -delete
  find . -name '*.pyo' -delete

  echo "**************************"
  export PATH=/opt/numenta/anaconda/bin:$PATH
  echo "PATH=${PATH}"

  echo "Compiling all .py files..."
  for src_d in conf docs grok
  do
    # compileall only drills 10 deep, so rather than having a mysterious
    # failure later if our directory structure gets more complex, compile
    # in every subdir.
    if [ -d "${src_d}" ]; then
      echo "Compiling .py files in ${src_d}"
      find "${src_d}" -type d -exec python -m compileall '{}' ';'
    else
      echo "**********"
      echo "${src_d} not found during .py compilation in prepare_repo_for_packaging"
      echo "**********"
      exit 1
    fi
  done

  # Delete configs so they are not embedded in the RPM. Conf files should
  # be generated by python setup.py init, not installed from a rpm.

  echo "running git clean -xf conf/"
  git clean -xf conf/

  if [ -d conf ]; then
    echo "Nuking conf files that have corresponding .tpl files"
    for raw_f in conf/*.tpl
    do
      template_f=$(basename "${raw_f}")

      # This is deliberately unquoted - normally we'd want it quoted to disable
      # accidental globbing, but we want to glob here
      rm -fv conf/${template_f%%.*}.conf
    done
    echo "exclude conf/overrides from rpm explicitly"
    rm -fv conf/overrides/*
  else
    echo "conf directory missing"
    echo -n "pwd: "
    pwd
  fi

  # Scrub egg-link files. They inevitably point to directories on the build
  # machine that will not be on the machines we're installing the RPM on, so
  # kill them with fire.
  find . -name '*.egg-link' -exec rm '{}' ';'

  # Scrub random garbage
  rm -f .gitignore \
        .bowerrc \
        .project \
        .pydevproject \
        CI.lock
popd

cat << KABOOM



     _.-^^---....,,--
 _--                  --_
<                        >)
|          BOOM!          |
 \._                   _./
    ``---. . , ; .--'''
          | |   |
       .-=||  | |=-.
       \-=#$%&%$#=-'
          | ;  :|
 _____.,-#%&*@%#&#~,._____


Your .git directory has been purged.
KABOOM

# Keep prep script out of the RPM
rm -f "$0"
