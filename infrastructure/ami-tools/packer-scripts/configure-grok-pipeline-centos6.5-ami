#!/bin/bash
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
#
# This should only contain settings specific to Grok Plumbing AMIs

source /etc/grok/supervisord.vars

echo "Marking instance as being an AMI build..."
AMIBUILD_LOCK=/tmp/baking-ami
NUMENTA=/opt/numenta
PRODUCTS="${NUMENTA}/products"
touch "${AMIBUILD_LOCK}"
S3_ROOT_URL="https://s3-us-west-2.amazonaws.com/public.numenta.com/yum/x86_64"

splat() {
  # Make it easier to distinguish phases of the script in the scrollback
  echo "


.                                    ######
.                                  ##########
.                                 ############
.                                ##############
.                                ##############
.                                ##############
.                                 ############
.                                  ##########
.                                    ######


  "
}

install-prerequisites-and-update-repos() {
  splat
  # clean any stale /etc/grok and remake the folder
  rm -rf /etc/grok
  mkdir -p /etc/grok

  echo "Engraving products SHA and build timestamp into AMI"
  cp /tmp/products.sha /etc/grok/ami-operations.sha
  date > /etc/grok/ami-bake.time
  rm -f /tmp/products.sha /tmp/build.time

  echo "Purging old grok repo file..."
  rm -f /etc/yum.repos.d/grok.repo

  echo "Cleaning up stale yum data..."
  yum clean all

  echo "Ensure Numenta S3 repos are current..."
  for repo in grok-development.repo \
              grok-release-candidates.repo \
              grok-releases.repo \
              nta-carbonite.repo \
              nta-thirdparty.repo
  do
    echo "Installing ${repo}..."
    mv "/tmp/${repo}" /etc/yum.repos.d
  done
  yum clean all
  yum makecache
  yum repolist

  yum remove -y numenta-infrastructure-common grok-updater

  # Ensure our pip is current
  export PATH="${NUMENTA}/anaconda/bin:${PATH}"
  export PYTHONPATH="${NUMENTA}/anaconda/lib/python2.7/site-packages"
  "${NUMENTA}/anaconda/bin/pip" install --upgrade pip setuptools
  "${NUMENTA}/anaconda/bin/pip" install numpy==1.9.2
}

run-salt() {
  splat
  echo "Configuring Salt minion_id"
  echo
  echo "Setting Salt minion_id to grok-server"
  echo grok-server > /etc/salt/minion_id

  # clean any existing salt states and point to the grok salt cellar
  rm -rf /srv/salt
  ln -s "${PRODUCTS}/infrastructure/saltcellar" /srv/salt

  echo "Running Salt..."
  run-salt-solo | tee /tmp/saltrun.log

  # Salt exits zero unless the process crashes, even if there are failures in
  # particular states.
  salt_err_count=`grep -ic "Result: False" /tmp/saltrun.log`
  echo
  echo "post run-salt-solo"
  if [ "${salt_err_count}" != 0 ]; then
    echo "Salt failed with ${salt_err_count} failures"
    grep -i "Result: False" /tmp/saltrun.log
    exit "${salt_err_count}"
  fi
  rm -f /tmp/saltrun.log
}

install-grok() {
  splat
  echo "Installing Grok..."
  yum install -y "${S3_ROOT_URL}/${GROK_RPM_NAME}"
  if [ $? != 0 ]; then
    echo "Failed to install Grok RPM"
    exit 1
  fi

  # We need to install grok-private-settings to get WUFOO and S3 configuration
  # information
  yum install -y grok-private-settings
  if [ $? != 0 ]; then
    echo "Failed to install Grok private settings"
    exit 1
  fi

  echo "Creating symlink for supervisord.vars"
  ln -s "${PRODUCTS}/grok/supervisord.vars" /etc/grok/supervisord.vars
  echo "Sourcing supervisord.vars..."
  source /etc/grok/supervisord.vars

  echo "Creating symlink to ${NUMENTA}/grok and setting permissions"
  rm -fr "${NUMENTA}"/grok
  ln -s "${PRODUCTS}/grok" "${NUMENTA}"/grok
  chown -R ec2-user:ec2-user "${PRODUCTS}"

  pushd "${PRODUCTS}"
    echo "Running install-grok.sh"

    ./install-grok.sh "${NUMENTA}/anaconda/lib/python2.7/site-packages" "${NUMENTA}/anaconda/bin"
    if [ $? != 0 ]; then
      echo "Failed to install Grok"
      exit 1
    fi
  popd
}

start-grok() {
  splat
  echo "Starting grok services..."
  service grokservices start
  if [ $? != 0 ]; then
    echo "grokservices start failed"
    exit 1
  fi
}


install-prerequisites-and-update-repos
install-grok
run-salt
start-grok
