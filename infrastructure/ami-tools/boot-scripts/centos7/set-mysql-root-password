#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
import ConfigParser
import os
import sys
import uuid

from subprocess import call

MYSQL_PASSWORD_F = "/etc/grok/mysql_password"
CONF_D = os.path.join(os.environ.get("GROK_HOME", "/opt/numenta/grok"), "conf")
MYSQL_CONFIG_TPL = os.path.join(CONF_D, "application.tpl")
MYSQL_CONFIG = os.path.join(CONF_D, "application.conf")


def updateConfig(configPath, section, option, value):
  config = ConfigParser.SafeConfigParser()
  config.read(configPath)
  if config.has_section(section) and option in config.options(section):
    config.set(section, option, value)
    with open(configPath, "w") as fp:
      config.write(fp)
      config.write(sys.stdout)
  else:
    print "Not able to find %s/%s in %s" % (section, option, configPath)
    sys.exit(1)


def setMysqlPassword():
  if os.path.isfile(MYSQL_PASSWORD_F):
    print "Mysql password updated before, not updating"
    with file(MYSQL_PASSWORD_F) as fp:
      mysqlPassword = fp.read()
  else:
    print "Mysql password not updated before, updating..."
    mysqlPassword = uuid.uuid4().hex
    changeMysqlPassword = 'mysqladmin -u root password "%s"' % mysqlPassword
    status = call(changeMysqlPassword, shell=True)
    if status:
      print "Failed to set mysql password"
      sys.exit(1)

    with open(MYSQL_PASSWORD_F, "w") as fp:
      fp.write(mysqlPassword)

  # Make sure .tpl and .conf are present
  # This check specially applies for .conf on first boot
  print "syncing conf/tpl to current passwords"
  if os.path.isfile(MYSQL_CONFIG_TPL):
    updateConfig(MYSQL_CONFIG_TPL, "repository", "passwd", mysqlPassword)

  if os.path.isfile(MYSQL_CONFIG):
    updateConfig(MYSQL_CONFIG, "repository", "passwd", mysqlPassword)


if __name__ == "__main__":

  setMysqlPassword()
