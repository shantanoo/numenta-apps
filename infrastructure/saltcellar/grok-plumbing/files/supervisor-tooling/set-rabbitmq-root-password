#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
import ConfigParser
import os
import sys
import uuid

NOTE: this doesn't work since there is no longer rabbitmq.tpl, rabbitmq.conf is
in a different place and will shortly move to a different place per TAUR-773. And
finally, we will have a tool for overriding rabbitmq login info, so this code will
need to use the tool instead of writing to the config directly.

from subprocess import call

RABBIT_PASSWORD_F = "/etc/grok/rabbit_password"
CONF_D = os.path.join(os.environ.get("GROK_HOME", "/opt/numenta/grok"), "conf")
RABBIT_CONFIG_TPL = os.path.join(CONF_D, "rabbitmq.tpl")
RABBIT_CONFIG = os.path.join(CONF_D, "rabbitmq.conf")


def updateConfig(configPath, section, option, value):
  config = ConfigParser.SafeConfigParser()
  config.read(configPath)
  if config.has_section(section) and option in config.options(section):
    config.set(section, option, value)
    with open(configPath, "w") as fp:
      config.write(fp)
      config.write(sys.stdout)
  else:
    print "Not able to find %s/%s in %s" % (section, option, configPath)
    sys.exit(1)


def setRabbitmqPassword():
  if os.path.isfile(RABBIT_PASSWORD_F):
    print "Rabbitmq password was updated before, not updating"
    with file(RABBIT_PASSWORD_F) as fp:
      rabbitmqPassword = fp.read()
  else:
    print "Rabbitmq password not updated before, updating..."
    rabbitmqPassword = uuid.uuid4().hex
    changeRabbitPassword = 'rabbitmqctl change_password guest "%s"' % \
      rabbitmqPassword
    status = call(changeRabbitPassword, shell=True)
    if status:
      print "Failed to set rabbitmq password"
      sys.exit(1)
    with open(RABBIT_PASSWORD_F, "w") as fp:
      fp.write(rabbitmqPassword)

  # Make sure .tpl and .conf are present
  # This check specially applies for .conf on first boot
  print "syncing conf/tpl to current password"
  if os.path.isfile(RABBIT_CONFIG_TPL):
    updateConfig(RABBIT_CONFIG_TPL, "credentials", "password", rabbitmqPassword)

  if os.path.isfile(RABBIT_CONFIG):
    updateConfig(RABBIT_CONFIG, "credentials", "password", rabbitmqPassword)



if __name__ == "__main__":

  if os.geteuid() != 0:
    print("Please run as root")
    sys.exit(1)

  setRabbitmqPassword()
